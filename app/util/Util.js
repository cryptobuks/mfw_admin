Ext.define('Mfw.util.Util', {
    alternateClassName: 'Util',
    singleton: true,

    api: window.location.origin + '/api',


    /**
     * Called recursively to transform/sanitize data sent back to server
     * by removing/cleaning up extra fields generated by the UI
     */
    sanitize: function (data) {
        Ext.Object.each(data, function (key, value) {
            if (Ext.String.startsWith(key, '_') || key === 'id') {
                delete data[key];
            }
            if (Ext.isArray(value)) {
                Ext.Array.each(value, function (v) {
                    Util.sanitize(v);
                })
            }
            if (Ext.isObject(value)) {
                Util.sanitize(value);
            }
        });
        return data;
    },

    tmpColumns: [
        { name: 'Protocol'.t(),    field: 'protocol' },
        { name: 'Username'.t(),    field: 'username' },
        { name: 'Hostname'.t(),    field: 'hostname' },
        { name: 'Client'.t(),      field: 'c_client_addr' },
        { name: 'Server'.t(),      field: 's_server_addr' },
        { name: 'Server Port'.t(), field: 's_server_port' },
    ],

    fieldOperators: [
        { name: 'equals [=]'.t(),            value: '=' },
        { name: 'not equals [!=]'.t(),       value: '!=' },
        { name: 'greater than [>]'.t(),      value: '>' },
        { name: 'less than [<]'.t(),         value: '<' },
        { name: 'greater or equal [>=]'.t(), value: '>=' },
        { name: 'less or equal [<=]'.t(),    value: '<='},
        { name: 'like'.t(),                  value: 'like' },
        { name: 'not like'.t(),              value: 'not like' },
        { name: 'is'.t(),                    value: 'is' },
        { name: 'is not'.t(),                value: 'is not' },
        { name: 'in'.t(),                    value: 'in' },
        { name: 'not in'.t(),                value: 'not in' }
    ],

    protocols: [
        { name: 'HOPOPT' },
        { name: 'ICMP' },
        { name: 'IGMP' },
        { name: 'GGP' },
        { name: 'IP-in-IP' },
        { name: 'ST' },
        { name: 'TCP' },
        { name: 'CBT' },
        { name: 'EGP' },
        { name: 'IGP' },
        { name: 'BBN-RCC-MON' },
        { name: 'NVP-II' },
        { name: 'PUP' },
        { name: 'ARGUS' },
        { name: 'EMCON' },
        { name: 'XNET' },
        { name: 'CHAOS' },
        { name: 'UDP' },
        { name: 'MUX' },
        { name: 'DCN-MEAS' },
        { name: 'HMP' },
        { name: 'PRM' },
        { name: 'XNS-IDP' },
        { name: 'TRUNK-1' },
        { name: 'TRUNK-2' },
        { name: 'LEAF-1' },
        { name: 'LEAF-2' },
        { name: 'RDP' },
        { name: 'IRTP' },
        { name: 'ISO-TP4' },
        { name: 'NETBLT' },
        { name: 'MFE-NSP' },
        { name: 'MERIT-INP' },
        { name: 'DCCP' },
        { name: '3PC' },
        { name: 'IDPR' },
        { name: 'XTP' },
        { name: 'DDP' },
        { name: 'IDPR-CMTP' },
        { name: 'TP++' },
        { name: 'IL' },
        { name: 'IPv6' },
        { name: 'SDRP' },
        { name: 'IPv6-Route' },
        { name: 'IPv6-Frag' },
        { name: 'IDRP' },
        { name: 'RSVP' },
        { name: 'GRE' },
        { name: 'MHRP' },
        { name: 'BNA' },
        { name: 'ESP' },
        { name: 'AH' },
        { name: 'I-NLSP' },
        { name: 'SWIPE' },
        { name: 'NARP' },
        { name: 'MOBILE' },
        { name: 'TLSP' },
        { name: 'SKIP' },
        { name: 'IPv6-ICMP' },
        { name: 'IPv6-NoNxt' },
        { name: 'IPv6-Opts' },
        { name: 'CFTP' },
        { name: 'SAT-EXPAK' },
        { name: 'KRYPTOLAN' },
        { name: 'RVD' },
        { name: 'IPPC' },
        { name: 'SAT-MON' },
        { name: 'VISA' },
        { name: 'IPCU' },
        { name: 'CPNX' },
        { name: 'CPHB' },
        { name: 'WSN' },
        { name: 'PVP' },
        { name: 'BR-SAT-MON' },
        { name: 'SUN-ND' },
        { name: 'WB-MON' },
        { name: 'WB-EXPAK' },
        { name: 'ISO-IP' },
        { name: 'VMTP' },
        { name: 'SECURE-VMTP' },
        { name: 'VINES' },
        { name: 'TTP' },
        { name: 'NSFNET-IGP' },
        { name: 'DGP' },
        { name: 'TCF' },
        { name: 'EIGRP' },
        { name: 'OSPF' },
        { name: 'Sprite-RPC' },
        { name: 'LARP' },
        { name: 'MTP' },
        { name: 'AX.25' },
        { name: 'IPIP' },
        { name: 'MICP' },
        { name: 'SCC-SP' },
        { name: 'ETHERIP' },
        { name: 'ENCAP' },
        { name: 'GMTP' },
        { name: 'IFMP' },
        { name: 'PNNI' },
        { name: 'PIM' },
        { name: 'ARIS' },
        { name: 'SCPS' },
        { name: 'QNX' },
        { name: 'A/N' },
        { name: 'IPComp' },
        { name: 'SNP' },
        { name: 'Compaq-Peer' },
        { name: 'IPX-in-IP' },
        { name: 'VRRP' },
        { name: 'PGM' },
        { name: 'L2TP' },
        { name: 'DDX' },
        { name: 'IATP' },
        { name: 'STP' },
        { name: 'SRP' },
        { name: 'UTI' },
        { name: 'SMP' },
        { name: 'SM' },
        { name: 'PTP' },
        { name: 'IS-IS' },
        { name: 'FIRE' },
        { name: 'CRTP' },
        { name: 'CRUDP' },
        { name: 'SSCOPMCE' },
        { name: 'IPLT' },
        { name: 'SPS' },
        { name: 'PIPE' },
        { name: 'SCTP' },
        { name: 'FC' },
        { name: 'RSVP-E2E-IGNORE' },
        { name: 'Mobility' },
        { name: 'UDPLite' },
        { name: 'MPLS-in-IP' },
        { name: 'manet' },
        { name: 'HIP' },
        { name: 'Shim6' },
        { name: 'WESP' },
        { name: 'ROHC' }
    ],

    // adds timezone computation to ensure dates showing in UI are showing actual server date
    serverToClientDate: function (serverDate) {
        if (!serverDate) { return null; }
        return Ext.Date.add(serverDate, Ext.Date.MINUTE, new Date().getTimezoneOffset() / 60000);
    },

    // extracts the timezone computation from UI dates before requesting new data from server
    clientToServerDate: function (clientDate) {
        if (!clientDate) { return null; }
        return Ext.Date.subtract(clientDate, Ext.Date.MINUTE, new Date().getTimezoneOffset() / 60000);
    }

});


Ext.util.Format.dateFormatter = function (value, format) {
    if (!value) {
        return '';
    }

    if (!Ext.isDate(value)) {
        value = new Date(value);
    }
    return Ext.Date.dateFormat(value, format || 'Y-m-d H:i A');
};
