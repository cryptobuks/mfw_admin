Ext.define('Mfw.settings.Util', {
    alternateClassName: 'Util',
    singleton: true,

    api: window.location.origin + '/api',
    // api: 'http://192.168.101.233/api',


    /**
     * Called recursively to transform/sanitize data sent back to server
     * by removing/cleaning up extra fields generated by the UI
     */
    sanitize: function (data) {
        console.log(data);
        Ext.Object.each(data, function (key, value) {
            if (Ext.String.startsWith(key, '_') || key === 'id') {
                delete data[key];
            }

            // remove null or empty string keys
            if (value === '' || value === null) {
                delete data[key];
            }

            if (Ext.isArray(value)) {
                Ext.Array.each(value, function (v) {
                    Util.sanitize(v);
                });
            }
            if (Ext.isObject(value)) {
                Util.sanitize(value);
            }
        });
        // console.log(data);
        return data;
    },

    ruleOperators: [
        { value: '==', text: 'Equals'.t(), sign: ' [ = ]' },
        { value: '!=', text: 'Not Equals'.t(), sign: ' [ &ne; ]' },
        { value: '>', text: 'Greater Than'.t(), sign: ' [ &gt; ]' },
        { value: '<', text: 'Less Than'.t(), sign: ' [ &lt; ]' },
        { value: '>=', text: 'Greater Than or Equal'.t(), sign:' [ &ge; ]' },
        { value: '<=', text: 'Less Than or Equal'.t(), sign: ' [ &le; ]' }
    ],

    conditions: [{
        type:'IP_PROTOCOL',
        name: 'IP Protocol'.t(),
        operators: ['eq', 'ne'],
        field: {
            xtype: 'selectfield',
            forceSelection: true,
            editable: false,
            displayTpl: '{text} [ {value} ]',
            itemTpl: '{text} <span style="color: #999">[ {value} ]</span>',
            // value: 6, // a default value
            options: Globals.protocols
        }
    }, {
        type:'CLIENT_ADDRESS',
        name: 'Client Address'.t(),
        field: {
            xtype: 'textfield',
            validators: ['ipaddress']
        }
    }, {
        type:'SERVER_ADDRESS',
        name: 'Server Address'.t(),
        field: {
            xtype: 'textfield',
            validators: ['ipaddress']
        }
    }, {
        type:'CLIENT_PORT',
        name: 'Client Port'.t(),
        field: {
            xtype: 'numberfield',
            validators: ['number']
        }
    }, {
        type:'SERVER_PORT',
        name: 'Server Port'.t(),
        field: {
            xtype: 'numberfield',
            validators: ['number']
        }
    }, {
        type:'CLIENT_INTERFACE_ZONE',
        name: 'Client Interface Zone'.t(),
        operators: ['eq', 'ne']
    }, {
        type:'SERVER_INTERFACE_ZONE',
        name: 'Server Interface Zone'.t(),
        operators: ['eq', 'ne']
    }, {
        type:'SOURCE_ADDRESS',
        name: 'Source Address'.t()
    }, {
        type:'DESTINATION_ADDRESS',
        name: 'Destination Address'.t()
    }, {
        type:'SOURCE_PORT',
        name: 'Source Port'.t()
    }, {
        type:'DESTINATION_PORT',
        name: 'Destination Port'.t()
    }, {
        type:'SOURCE_INTERFACE_ZONE',
        name: 'Source Interface Zone'.t(),
        operators: ['eq', 'ne']
    }, {
        type:'DESTINATION_INTERFACE_ZONE',
        name: 'Destination Interface Zone'.t(),
        operators: ['eq', 'ne']
    }, {
        type:'SOURCE_INTERFACE_NAME',
        name: 'Source Interface Name'.t(),
        operators: ['eq', 'ne']
    }, {
        type:'DESTINATION_INTERFACE_NAME',
        name: 'Destination Interface Name'.t(),
        operators: ['eq', 'ne']
    }, {
        type: 'CT_STATE',
        name: 'Connection State',
        operators: ['eq', 'ne'],
        field: {
            xtype: 'selectfield',
            forceSelection: true,
            editable: false,
            // queryMode: 'local',
            // displayField: 'name',
            // valueField: 'name',
            options: [
                { text: 'Established', value: 'established' },
                { text: 'Related', value: 'related' },
                { text: 'Invalid', value: 'invalid' }
            ]
        }
    }],

    // adds timezone computation to ensure dates showing in UI are showing actual server date
    serverToClientDate: function (serverDate) {
        if (!serverDate) { return null; }
        return Ext.Date.add(serverDate, Ext.Date.MINUTE, new Date().getTimezoneOffset() / 60000);
    },

    // extracts the timezone computation from UI dates before requesting new data from server
    clientToServerDate: function (clientDate) {
        if (!clientDate) { return null; }
        return Ext.Date.subtract(clientDate, Ext.Date.MINUTE, new Date().getTimezoneOffset() / 60000);
    },

    constructor: function() {
        this.initConfig({
            ruleOperatorsMap: Ext.Array.toValueMap(this.ruleOperators, 'value')
        });
    }
});
